openapi: 3.0.1
info:
  title: Candy Shop Analytics API
  description: Use the *Candy Shop Analytics API* to view historical revenue, track
    bestselling items, and search order history. This API uses JWT-based token authentication
    for making requests for logged-in users.
  version: 0.0.1
  termsOfService: https://freddy.codesubmit.io/terms
  contact:
    name: Freddy's Halloween Candy Shop 
    url: https://freddy.codesubmit.io/api
    email: freddy_k@gmail.com
servers:
- url: https://freddy.codesubmit.io/
paths:
  /login:
    post:
      summary: Create Access Token
      description: Generates an `access_token` and a `refresh_token` when the user
        logs into the web app with valid credentials.<br><br>The `access_token` is
        used to make authenticated calls to other Candy Shop Analytics API endpoints
        by passing along the token in the Authorization Header.<br><br>**Notes:**<br>
        - Both tokens have a JSON Web Token (JWT) format.<br> - The `access_token`
        expires 15 minutes after creation.<br> - The `refresh_token` expires 7 days
        after creation. See *Refresh Access Token*.
      operationId: createToken
      requestBody:
        description: The username and password.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/credentials'
        required: true
      responses:
        200:
          description: The access and refresh tokens were generated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createTokens'
        400:
          description: Bad request. The request could not be understood by the server
            due to incorrect syntax. Ensure the request body is in the expected JSON
            format.
        401:
          description: Unauthorized. Bad credentials. Ensure a valid username and
            password have been entered correctly.
  /refresh:
    post:
      summary: Refresh Access Token
      description: Generates a new `access_token` when the current one expires to
        keep the user logged into the web app.<br><br>The new `access_token` is generated by passing along the `refresh_token` in the Authorization Header.<br><br>**Notes:**<br>- The `refresh_token` created by the login endpoint can be used to generate a new `access_token` as many times as necessary but expires 7 days after creation. After expiration, the user must log into the web app with valid credentials again to generate a new `access_token` and `refresh_token`. See *Create Access Token*.<br>-  The new `access_token` has a JSON Web Token (JWT) format.<br>-  The new `access_token` expires 15 minutes after creation.
      operationId: refreshToken
      responses:
        200:
          description: The access token was generated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/refreshTokens'
        401:
          description: Unauthorized. Authorization Header missing or token has expired.
            Ensure a valid Bearer 'refresh_token' has been entered in the Authorization
            Header.
        422:
          description: Incorrect Authorization Header value. Ensure the 'refresh_token'
            has been entered correctly.
      security:
      - Bearer: []
  /dashboard:
    get:
      summary: Store Overview
      description: Returns data to be displayed in the store's analytics overview
        dashboard, including daily revenue (previous 7 days), monthly revenue (previous
        12 months), and bestselling items.<br><br>The `access_token` is used to make
        an authenticated call to the *dashboard* endpoint by passing along the token
        in the Authorization Header.
      operationId: viewAnalytics
      responses:
        200:
          description: Dashboard data was returned successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dashboardData'
        401:
          description: Unauthorized. Authorization Header missing or token has expired.
            Ensure a valid Bearer `access_token` has been entered in the Authorization
            Header.
        422:
          description: Incorrect Authorization Header value. Ensure the `access_token`
            has been entered correctly.
      security:
      - Bearer: []
  /orders:
    get:
      summary: List All Orders
      description: Returns a list of all orders including order details and customer
        data for each order. Query parameters can be used to filter results by page
        number and search term.<br><br>The `access_token` is used to make an authenticated
        call to the *orders* endpoint by passing along the token in the Authorization
        Header.
      operationId: viewOrders
      parameters:
      - name: page
        in: query
        description: The page number of orders to return. Only order data from the
          entered page number will be returned. Default is page 1.
        schema:
          type: integer
      - name: q
        in: query
        description: The search term used to filter the orders included in the response. Valid values include *customer/email*, *customer/name*, *customer/surname*,
          *product/name*. Default is no value.<br><br>**Note:-**<br>-  The search
          term must match the email username, customer name, customer surname or a
          complete word of the product name exactly.<br>-  The search term value is
          not case sensitive.<br>-  More than one search term can be entered (separated
          by a space) and will return all orders for the specified page containing
          at least one of the valid search terms.
        schema:
          type: string
      responses:
        200:
          description: Order data was returned successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orderList'
        401:
          description: Unauthorized. Authorization Header missing or token has expired.
            Ensure a valid Bearer `access_token` has been entered in the Authorization
            Header.
        422:
          description: Incorrect Authorization Header value. Ensure the `access_token`
            has been entered correctly.
        500:
          description: Request could not be completed. Ensure valid values have been
            entered for the query parameters.
      security:
      - Bearer: []
components:
  schemas:
    credentials:
      type: object
      properties:
        username:
          type: string
          description: The user's username.
          example: freddy
        password: 
          type: string
          description: The user's password.
          example: ElmStreet2019
    createTokens:
      type: object
      properties:
        access_token:
          type: string
          description: The requested access token.
          example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE2NDAyODMzNzQsIm5iZiI6MTY0MDI4MzM3NCwianRpIjoiNDI2MjZlY2UtNTI3NC00ZmUyLWJkYmUtMjY5NjMyZDZmNDYzIiwiZXhwIjoxNjQwMjg0Mjc0LCJpZGVudGl0eSI6ImZyZWRkeSIsImZyZXNoIjpmYWxzZSwidHlwZSI6ImFjY2VzcyJ9.W_116OTVcH5yBcFIPMCdfAmrl0wl6Msjs9y_iMJfVr4
        refresh_token:
          type: string
          description: The refresh token for this access token, which can be used
            to request a new access token when the current one expires.
          example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE2NDAyODMzOTEsIm5iZiI6MTY0MDI4MzM5MSwianRpIjoiNzgzMjBlODctMzMzMS00YzMyLWFhZDAtZWRjYTg3ZWRmMDUyIiwiZXhwIjoxNjQyODc1MzkxLCJpZGVudGl0eSI6ImZyZWRkeSIsInR5cGUiOiJyZWZyZXNoIn0.b9WNOT79qBdKr7sr2gWYqZJa05TNmZZPshJS-1EdAfE
    refreshTokens:
      type: object
      properties:
        access_token:
          type: string
          description: The requested access token.
          example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE2NDAyODMzOTEsIm5iZiI6MTY0MDI4MzM5MSwianRpIjoiNzgzMjBlODctMzMzMS00YzMyLWFhZDAtZWRjYTg3ZWRmMDUyIiwiZXhwIjoxNjQyODc1MzkxLCJpZGVudGl0eSI6ImZyZWRkeSIsInR5cGUiOiJyZWZyZXNoIn0.b9WNOT79qBdKr7sr2gWYqZJa05TNmZZPshJS-1EdAfE
    dashboardData:
      type: object
      properties:
        dashboard:
          $ref: '#/components/schemas/dashObject'
        sales_over_time_week:
          $ref: '#/components/schemas/weekSales'
        sales_over_time_month:
          $ref: '#/components/schemas/monthSales'
      description: Top level
    dashObject:
      type: object
      properties:
        bestsellers:
          type: array
          description: Bestselling product information.
          items:
            $ref: '#/components/schemas/bestsellerData'
    weekSales:    
      type: object
      properties:
        day:
          $ref: '#/components/schemas/dayOrderData'
      description: The store's total sales per day over the last 7 days.
    dayOrderData:
      type: object
      properties:
        orders:
          type: integer
          description: The total number of orders per day.
          example: 96
        total:
          type: integer
          description: The total revenue per day.
          example: 270240
      description: The day of the week.
    monthSales:     
      type: object
      properties:
        month:
          $ref: '#/components/schemas/monthOrderData'
      description: The store's total sales per month over the last 12 months.
    monthOrderData:
      type: object
      properties:
        orders:
          type: integer
          description: The total number of orders per month.
          example: 330
        total:
          type: integer
          description: The total revenue per month.
          example: 2952510
      description: The month of the year.
    bestsellerData:
      type: object
      properties:
        product:
          $ref: '#/components/schemas/productData'
        revenue:
          type: integer
          description: The total revenue of the product.
          example: 2835702
        units:
          type: integer
          description: The total number of units sold of the product.
          example: 6178
    productData:      
      type: object
      properties:
        id:
          type: string
          description: The ID of the product.
          example: e2414f21-2647-c4aa-748a-81dc838db74a
        image:
          type: string
          description: The URL of the product image.
          example: https://images.unsplash.com/photo-1463860914822-61dc3ee606f7?crop=entropy&cs=tinysrgb&fit=crop&fm=jpg&h=500&ixid=eyJhcHBfaWQiOjF9&ixlib=rb-1.2.1&q=80&w=500
        name:
          type: string
          description: The name of the product.
          example: Cartoon Network Studios Lime Flower Youngberry Gummies
      description: A list of product information.
    orderList:
      type: object
      properties:
        orders:
          type: array
          description: The list of order information.
          items:
            $ref: '#/components/schemas/orderData'
        page:
          type: integer
          description: The page number.
          example: 1
        total:
          type: integer
          description: The total number of orders.
          example: 2
    orderData:
      type: object
      properties:
        created_at:
          type: string
          description: The date and time the order was placed.
          example: "2018-06-28T17:56:47.983074"
        currency:
          type: string
          description: The symbol of the currency used to place the order.
          example: $
        customer:
          $ref: '#/components/schemas/customerData'
        id:
          type: string
          description: The ID of the order.
          example: 1c31701f-ab88-3f1d-0e67-73d853a8643b
        product:
          $ref: '#/components/schemas/productAndQuantity'
        status:
          type: string
          description: The status of the order.
          example: delivered
        total:
          type: integer
          description: The total revenue of the order.
          example: 7694
    customerData:    
      type: object
      properties:
        address:
          $ref: '#/components/schemas/addressData'
        avatar:
          type: string
          description: The URL of the image associated with the customer's account.
          example: https://api.adorable.io/avatars/256/f400cca739e6569e68337f8379cf35fc.png
        email:
          type: string
          description: The customer's email address.
          example: childe1881@live.com
        id:
          type: string
          description: The ID of the customer.
          example: 1440afbd-b2c4-feb7-56f8-a0d5e4c70051
        name:
          type: string
          description: The customer's first name.
          example: Curtis
        surname:
          type: string
          description: The customer's last name.
          example: Meyer
      description: The customer data object.
    addressData:        
      type: object
      properties:
        city:
          type: string
          description: The customer's city.
          example: South Gate
        street:
          type: string
          description: The customer's street.
          example: Clarkson
        zipcode:
          type: string
          description: The customer's postal code.
          example: 47539
      description: The customer address data object.
    productAndQuantity:      
      allOf:
      - $ref: '#/components/schemas/productData'
      - type: object
        properties:
          quantity:
            type: integer
            description: The total number of the product ordered by the customer.
            example: 37
        description: The product data object.
  securitySchemes:
    Bearer:
      type: apiKey
      description: To make authenticated calls to Candy Shop Analytics API endpoints,
        a valid JWT `access_token` must be passed in the Authorization Header using
        the following syntax:- <br><br>**Bearer xxxxxx.yyyyyyy.zzzzzz**<br><br>If
        the `access_token` has expired (expires after 15 minutes), make a call to
        the *refresh* endpoint and pass the `refresh_token` in the Authorization Header
        to generate a new `access_token`.
      name: Authorization
      in: header
